# OpenTelemetry Collector Configuration
# This configuration receives logs via OTLP and exports them to multiple destinations

receivers:
  # OTLP receiver for gRPC and HTTP protocols
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - http://*
            - https://*

  # Optional: Prometheus receiver for metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  # Batch processor for efficient export
  batch:
    timeout: 2s
    send_batch_size: 512
    send_batch_max_size: 1024

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
    check_interval: 5s

  # Resource processor to add/modify resource attributes
  resource:
    attributes:
      - key: collector.name
        value: otel-logger-collector
        action: insert
      - key: collector.version
        value: 1.0.0
        action: insert

  # Attributes processor to modify log attributes
  attributes/logs:
    actions:
      - key: environment
        value: development
        action: insert
      - key: collector.processed_at
        value: ${env:HOSTNAME}
        action: insert

exporters:
  # Console/logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # File exporter to save logs to disk
  file:
    path: /tmp/otel-logs.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 3

  # Jaeger exporter for traces (if you also send traces)
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # OTLP HTTP exporter (for forwarding to another collector/backend)
  otlphttp:
    endpoint: http://localhost:4318
    tls:
      insecure: true
    compression: gzip

  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      collector: otel-logger

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133

  # Performance profiling
  pprof:
    endpoint: 0.0.0.0:1888

  # zPages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

  # Memory ballast for GC optimization
  memory_ballast:
    size_mib: 64

service:
  extensions: [health_check, pprof, zpages, memory_ballast]

  pipelines:
    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes/logs, batch]
      exporters: [logging, file]

    # Traces pipeline (optional)
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [jaeger, logging]

    # Metrics pipeline (optional)
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, logging]

  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888
      level: basic
